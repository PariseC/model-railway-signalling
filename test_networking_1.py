#----------------------------------------------------------------------
# This programme provides an example of how to use the MQTT Networking functions
# to link different applications (representing different "signal boxes") together
# via a MQTT broker. This is "Box1" - acting as the main Pi-Sprog interface
# ---------------------------------------------------------------------

from tkinter import *
from model_railway_signals import *
import logging

#----------------------------------------------------------------------
# Configure the log level. If no 'level' is specified specified only warnings and errors
# will be generated. A level of 'INFO' will tell you what the various functions are doing
# 'under the hood' - useful when developing/debugging a layout signalling Scheme. A level
# of 'DEBUG' will additionally report the DCC Bus commands being sent to the Pi-SPROG and
# the messages being published to external nodes via the MQTT Broker
#----------------------------------------------------------------------

logging.basicConfig(format='%(levelname)s: %(message)s',level=logging.INFO) 

# There is an additional level of debug logging that can be enabled for the MQTT interface
# This will show the log messages being generated by the Client for published/received messages
# Note that the main logging level also needs to be set to DEBUG to generate these messages

mqtt_debug = False

#----------------------------------------------------------------------
# This is the main callback function for the upper line
#----------------------------------------------------------------------

def upper_line_callback_function(item_id,callback_type):

    print ("Callback for upper line - Item: "+str(item_id)+" - Callback Type: "+str(callback_type))

    # Deal with changes to the Track Occupancy (based on signal passed events)
    if callback_type == sig_callback_type.sig_passed:
        if item_id == 1:
            set_section_occupied(1,clear_section_occupied(100))
        elif item_id == 2:
            set_section_occupied(2,clear_section_occupied(1))
        elif item_id == 3:
            set_section_occupied(3,clear_section_occupied(2))
        elif item_id == "Box2-1":
            clear_section_occupied(3)

    # Override signals based on track occupancy
    # Upper Line
    if section_occupied(1): set_signal_override(1)
    else: clear_signal_override(1)
    if section_occupied(2): set_signal_override(2)
    else: clear_signal_override(2)
    if section_occupied(3): set_signal_override(3)
    else: clear_signal_override(3)

    # Refresh the signal aspects based on the route settings
    # The order is important - Need to work back along the route
    update_signal(3, sig_ahead_id = "Box2-1")
    update_signal(2, sig_ahead_id = 3)
    update_signal(1, sig_ahead_id = 2)
        
    return()

#----------------------------------------------------------------------
# This is the main callback function for the lower line
#----------------------------------------------------------------------

def lower_line_callback_function(item_id,callback_type):

    print ("Callback for lower line - Item: "+str(item_id)+" - Callback Type: "+str(callback_type))

    # We want the local Section 10 to mirror any changes made to Box2 Section 12
    # So we get an indication of the "next Train" that is going to enter our section
    if callback_type == section_callback_type.section_updated:
        if item_id == "Box2-12":
            if section_occupied ("Box2-12"):
                set_section_occupied(10,section_label("Box2-12"))
            else:
                clear_section_occupied(10)

    # Deal with changes to the Track Occupancy (based on signal events)
    if callback_type == sig_callback_type.sig_passed:
        if item_id == 11:
            set_section_occupied(11,section_label("Box2-12"))
        elif item_id == 12:
            clear_section_occupied(11)
            trigger_timed_signal(12,0,5)

    # Override signals based on track occupancy
    if section_occupied("Box2-12"): set_signal_override(10)
    else: clear_signal_override(10)
    if section_occupied(11): set_signal_override(11)
    else: clear_signal_override(11)
        
    return()

#------------------------------------------------------------------------------------
# This is where the code begins
#------------------------------------------------------------------------------------

# Create the Window and canvas
print ("Creating Window and Canvas")
window = Tk()
window.title("Simple Networking Example - Box1 (Pi Sprog Node)")
canvas = Canvas(window,height=450,width=750,bg="grey85")
canvas.pack()

print ("Initialising Pi Sprog")
initialise_pi_sprog (dcc_debug_mode=False)
request_dcc_power_on()

print ("Creating DCC Mappings for Signals")
# Signals 1,2,3 assume a TrainTech DCC 4 Aspect Signal - these are event driven
# and can take up to 4 consecutive addresses (if you include the flashing aspects)
map_traintech_signal (sig_id = 1, base_address = 10)
map_traintech_signal (sig_id = 2, base_address = 20)
map_traintech_signal (sig_id = 3, base_address = 30)
# Signals 10,11,12 assume a single address mapping for the semaphore arms
map_semaphore_signal (sig_id = 10, main_signal = 101)
map_semaphore_signal (sig_id = 11, main_signal = 102)
map_semaphore_signal (sig_id = 12, main_signal = 103)

print ("Initialising MQTT Client and connecting to external Broker")
# Configure the MQTT Broker networking feature to allow this application node to act as a remote
# DCC command station for other application nodes (i.e. forward received DCC commands to the Pi-Sprog) 
configure_networking(broker_host ="mqtt.eclipseprojects.io", network_identifier="network1",
                     node_identifier= "Box1",publish_dcc_commands=False, mqtt_enhanced_debugging=mqtt_debug )
# Configure the upper line events/updates we want to publish/subscribe to
set_sections_to_publish_state(3)
subscribe_to_signal_updates("Box2",upper_line_callback_function,1)
subscribe_to_signal_passed_events("Box2",upper_line_callback_function,1)
# Configure the lower line events/updates we want to publish/subscribe to
subscribe_to_section_updates("Box2",lower_line_callback_function,12)
set_signals_to_publish_state(10)
set_signals_to_publish_passed_events(11)
# Box 1 is the DCC Command station so we subscribe to DCC events from Box2
subscribe_to_dcc_command_feed("Box2")
                     
print ("Drawing Layout Schematic")
canvas.create_line(0,150,750,150,fill="black",width=3) 
canvas.create_line(0,300,750,300,fill="black",width=3)
canvas.create_text (425,30,text="Section 3 is configured to publish state updates (to Box 2)")
canvas.create_text (425,50,text="State Updates from Box 2 Signal 1 are used to update Signal 3 Aspect")
canvas.create_text (425,70,text="Passed Events from Box 2 Signal 1 are used to update track occupancy")
canvas.create_text (400,210,text="Signal 10 is configured to publish Signal State Updates (to Box2)")
canvas.create_text (400,230,text="Signal 11 is configured to publish Signal Passed Events (to Box2)")
canvas.create_text (350,375,text="Distant Signal 10 is mounted on the Home Starter (signal 12) of Box 2")
canvas.create_text (680,400,text="Box 2 ===>>")

print ("Creating track Occupancy Sections")
# Upper Line Sections
# Section 100 is an editable section to "set" the next approaching train
canvas.create_text (75,20,text="Right Click to")
canvas.create_text (75,40,text="Set Next Train")
create_section (canvas,100,75,65,section_callback=upper_line_callback_function)
create_section (canvas,1,175,150,section_callback=upper_line_callback_function)
create_section (canvas,2,425,150,section_callback=upper_line_callback_function)
create_section (canvas,3,675,150,section_callback=upper_line_callback_function)
# Lower Line Sections
# Section 11 is a non editable section to "mirror" an external section
create_section (canvas,10,575,300,editable=False)
create_section (canvas,11,325,300,section_callback=lower_line_callback_function)

print ("Creating Signals")
create_colour_light_signal (canvas, 1, 50, 150,
                            signal_subtype = signal_sub_type.four_aspect,
                            sig_callback = upper_line_callback_function,
                            sig_passed_button = True,
                            refresh_immediately = False)
create_colour_light_signal (canvas, 2, 300, 150,
                            signal_subtype = signal_sub_type.four_aspect,
                            sig_callback = upper_line_callback_function,
                            sig_passed_button = True,
                            refresh_immediately = False)
create_colour_light_signal (canvas, 3, 550, 150,
                            signal_subtype = signal_sub_type.four_aspect,
                            sig_callback = upper_line_callback_function,
                            sig_passed_button = True,
                            refresh_immediately = False)
create_semaphore_signal (canvas, 10, 700, 300,
                        distant = True, orientation = 180,
                        sig_callback = lower_line_callback_function)
create_semaphore_signal (canvas, 11, 450, 300, orientation = 180,
                        sig_callback = lower_line_callback_function,
                        sig_passed_button = True)
create_semaphore_signal (canvas, 12, 200, 300, orientation = 180,
                        sig_callback = lower_line_callback_function,
                        sig_passed_button = True)

print ("Entering Main Event Loop")
window.mainloop()

#############################################################################################
#----------------------------------------------------------------------
# This programme provides a simple example of how to use the "points"
# and "signals" modules, with the tkinter graphics library to create a
# track schematic with a couple of points, add signals and then apply
# a basic "interlocking" scheme. For a more complicated example (with
# "track circuits", automatic signals and route displays see "my_layout"
# ---------------------------------------------------------------------

from tkinter import *
from model_railway_signals import *
import threading
import time
import logging

# Global variables to thrack the state of the test functions

signals_locked = False
signals_overriden = False
subsidaries_locked = False

#----------------------------------------------------------------------
# Here is where we configure the logging - to see what's going on 
#----------------------------------------------------------------------

# Here we configure logging to report the log level and the associated log message
# generated by the code. If you include ':%(funcName)s' in the format string then
# the log message will additionally tell you the function that generated the message
# The default level (no 'level' specified) will provide just warnings and errors
# A level of 'INFO' will tell you what the various 'model_railway_signalling' functions
# are doing 'under the hood' - useful when developing/debugging a layout signalling
# A level of 'DEBUG' will additionally report the DCC Bus commands being sent to the Pi-SPROG
logging.basicConfig(format='%(levelname)s: %(message)s',level=logging.WARNING) 

# There is an additional level of debug logging that can be enabled for the Pi-SPROG interface
# This will show the actual 'CBUS Grid Connect' protocol commands being sent and received
# Useful for comparing with the console output in the JMRI application for advanced debugging
# Note that the main logging level also needs to be set to DEBUG to generate these messages
debug_dcc = False

#----------------------------------------------------------------------
# This is the thread to continiually cycle through the route indications
#----------------------------------------------------------------------

def thread_to_cycle_routes (time_delay, null):

    while True:
        time.sleep (time_delay)
        for I in range(1,36):
            set_route (I,route_type.LH2,"1")
        time.sleep (time_delay)
        for I in range(1,36):
            set_route (I,route_type.LH1,"2")
        time.sleep (time_delay)
        for I in range(1,36):
            set_route (I,route_type.MAIN,"M")
        time.sleep (time_delay)
        for I in range(1,36):
            set_route (I,route_type.RH1,"3")
        time.sleep (time_delay)
        for I in range(1,36):
            set_route (I,route_type.RH2,"4")
    return()

#----------------------------------------------------------------------
# This is the main callback function for when something changes
# i.e. a point or signal "button" has been clicked on the display
#----------------------------------------------------------------------

def main_callback_function(item_id,callback_type):
    
    if point_switched(1):
        set_route(1,route= route_type.LH1)
        set_route(2,route= route_type.LH1)
        set_route(3,route= route_type.LH1)
        set_route(4,route= route_type.LH1)
        set_route(5,theatre_text="L")
    elif point_switched(2):
        set_route(1,route= route_type.RH1)
        set_route(2,route= route_type.RH1)
        set_route(3,route= route_type.RH1)
        set_route(4,route= route_type.RH1)
        set_route(5,theatre_text="R")
    else:
        set_route(1,route= route_type.MAIN)
        set_route(2,route= route_type.MAIN)
        set_route(3,route= route_type.MAIN)
        set_route(4,route= route_type.MAIN)
        set_route(5,theatre_text="O")

    if point_switched(3):
        set_route(6,route= route_type.LH1)
        set_route(7,route= route_type.LH1)
        set_route(8,route= route_type.LH1)
        set_route(9,route= route_type.LH1)
        set_route(10,theatre_text="L")
    elif point_switched(4):
        set_route(6,route= route_type.RH1)
        set_route(7,route= route_type.RH1)
        set_route(8,route= route_type.RH1)
        set_route(9,route= route_type.RH1)
        set_route(10,theatre_text="R")
    else:
        set_route(6,route= route_type.MAIN)
        set_route(7,route= route_type.MAIN)
        set_route(8,route= route_type.MAIN)
        set_route(9,route= route_type.MAIN)
        set_route(10,theatre_text="O")

    update_signal(50,1)
    update_signal(51,10)
    
    return()

#----------------------------------------------------------------------
# This is the callback function for Testing signals locking/unlocking 
#----------------------------------------------------------------------

def lock_unlock_signals():
    global signals_locked
    global lock_signals_button
    if signals_locked:
        for I in range(1,23): unlock_signal(I)
        lock_signals_button.config(relief="raised")
        signals_locked = False
    else:
        for I in range(1,23): lock_signal(I)
        lock_signals_button.config(relief="sunken")
        signals_locked = True
    return()

#----------------------------------------------------------------------
# This is the callback function for Testing subsidary locking/unlocking 
#----------------------------------------------------------------------

def lock_unlock_subsidary():
    global subsidaries_locked
    global lock_subsidary_button
    if subsidaries_locked:
        for I in range(1,23): unlock_subsidary(I)
        lock_subsidary_button.config(relief="raised")
        subsidaries_locked = False
    else:
        for I in range(1,23): lock_subsidary(I)
        lock_subsidary_button.config(relief="sunken")
        subsidaries_locked = True
    return()

#----------------------------------------------------------------------
# This is the callback function for testing setting/clearing Overrides
#----------------------------------------------------------------------

def set_clear_signal_overrides():
    global signals_overriden
    global set_signal_override_button
    if signals_overriden:
        for I in range(1,23): clear_signal_override(I)
        set_signal_override_button.config(relief="raised")
        signals_overriden = False
    else:
        for I in range(1,23): set_signal_override(I)
        set_signal_override_button.config(relief="sunken")
        signals_overriden = True
    return()

#----------------------------------------------------------------------
# This is the callback function for Printing the current signal state
#----------------------------------------------------------------------

def print_signal_state():
    print ("")
    print ("Current State of all signals is as follows")
    for I in range(1,23):
        print ("Signal "+str(I)+ " : sig_clear = "+str(signal_clear(I))+", overridden = "+
               str(signal_overridden(I))+", approach_control_set = "+str(approach_control_set(I)))
    return()

#----------------------------------------------------------------------
# This is the callback function for Printing the current subsidary state
#----------------------------------------------------------------------

def print_subsidary_state():
    print ("")
    print ("Current State of all subsidaries is as follows:")
    for I in range(1,23):
        print ("Subsidary "+str(I)+ " : sig_clear = "+str(subsidary_clear(I)))
    return()

#----------------------------------------------------------------------
# These are the callback functions for toggling the signal states
#----------------------------------------------------------------------

def toggle_signals():
    for I in range(1,23):toggle_signal(I)
    return()

def toggle_subsidaries():
    for I in range(1,23):toggle_subsidary(I)
    return()

#----------------------------------------------------------------------
# These are the callback functions for setting/clearing approach control
#----------------------------------------------------------------------

def set_all_approach_control_red():
    for I in range(1,23):set_approach_control(I)
    return()

def set_all_approach_control_yellow():
    for I in range(1,23):set_approach_control(I,release_on_yellow=True)
    return()

def clear_all_approach_control():
    for I in range(1,23):clear_approach_control(I)
    return()

#------------------------------------------------------------------------------------
# This is where the code begins
#------------------------------------------------------------------------------------

# Create the Window and canvas
print ("Creating Window and Canvas")
window = Tk()
window.title("Test Semaphore Signals")
canvas = Canvas(window,height=800,width=1200,bg="grey85")
canvas.pack()

print ("Creating Buttons for the Test Functions")

lock_signals_button = Button (canvas, text="Lock All Signals",
        state="normal", relief="raised",command=lambda:lock_unlock_signals())
canvas.create_window (10,10,window=lock_signals_button,anchor=NW)

lock_subsidary_button = Button (canvas, text="Lock All Subsidary Signals",
        state="normal", relief="raised",command=lambda:lock_unlock_subsidary())
canvas.create_window (150,10,window=lock_subsidary_button,anchor=NW)

set_signal_override_button = Button (canvas, text="Overide All Signals",
        state="normal", relief="raised",command=lambda:set_clear_signal_overrides())
canvas.create_window (360,10,window=set_signal_override_button,anchor=NW)

button = Button (canvas, text="Print Signal State",
        state="normal", relief="raised",command=lambda:print_signal_state())
canvas.create_window (520,10,window=button,anchor=NW)

button = Button (canvas, text="Print Subsidary State",
        state="normal", relief="raised",command=lambda:print_subsidary_state())
canvas.create_window (670,10,window=button,anchor=NW)

button = Button (canvas, text="Toggle Signals",
        state="normal", relief="raised",command=lambda:toggle_signals())
canvas.create_window (840,10,window=button,anchor=NW)

button = Button (canvas, text="Toggle Subsidaries",
        state="normal", relief="raised",command=lambda:toggle_subsidaries())
canvas.create_window (970,10,window=button,anchor=NW)

button = Button (canvas, text="Set Approach control Red",
        state="normal", relief="raised",command=lambda:set_all_approach_control_red())
canvas.create_window (20,750,window=button,anchor=NW)

button = Button (canvas, text="Set Approach control Yel",
        state="normal", relief="raised",command=lambda:set_all_approach_control_yellow())
canvas.create_window (220,750,window=button,anchor=NW)

button = Button (canvas, text="Clear Approach control ",
        state="normal", relief="raised",command=lambda:clear_all_approach_control())
canvas.create_window (420,750,window=button,anchor=NW)

print ("Drawing Schematic and creating points")

canvas.create_line(0,150,1075,150,fill="black",width=3)
create_point(canvas,1,point_type.LH,1100,150,"black",point_callback=main_callback_function)
create_point(canvas,2,point_type.RH,1150,150,"black",point_callback=main_callback_function)
canvas.create_line(1175,150,1200,150,fill="black",width=3)

canvas.create_line(0,250,25,250,fill="black",width=3)
create_point(canvas,3,point_type.LH,100,250,"black",orientation=180,point_callback=main_callback_function)
create_point(canvas,4,point_type.RH,50,250,"black",orientation=180,point_callback=main_callback_function)
canvas.create_line(125,250,1200,250,fill="black",width=3)

canvas.create_line(0,400,1200,400,fill="black",width=3)
canvas.create_line(0,500,1200,500,fill="black",width=3)
canvas.create_line(0,650,1200,650,fill="black",width=3)

print ("Initialising Pi Sprog and creating DCC Mappings")

initialise_pi_sprog (dcc_debug_mode=debug_dcc)
request_dcc_power_on()

print ("Creating Signals")

# ----------------------------------------------------------------

create_colour_light_signal (canvas,50,100,150,refresh_immediately = False,
                            sig_callback = main_callback_function)

create_semaphore_signal (canvas,1,250,150,
                        sig_callback = main_callback_function,
                        sig_passed_button = True )

create_semaphore_signal (canvas,2,425,150,
                        subsidarymain = True,
                        subsidarylh1 = True,
                        subsidaryrh1 = True,
                        lhroute1 = True,
                        rhroute1 = True,
                        sig_callback = main_callback_function,
                        sig_passed_button = True )

create_semaphore_signal (canvas,3,600,150,
                        subsidarymain = True,
                        subsidaryrh1 = True,
                        lhroute1 = True,
                        sig_callback = main_callback_function,
                        approach_release_button =True,
                        sig_passed_button = True )

create_semaphore_signal (canvas,4,775,150,
                        subsidarymain = True,
                        subsidarylh1 = True,
                        rhroute1 = True,
                        sig_callback = main_callback_function,
                        approach_release_button =True,
                        sig_passed_button = True )

create_semaphore_signal (canvas,5,950,150,
                        theatre_route_indicator = True,
                        sig_callback = main_callback_function,
                        approach_release_button =True,
                        sig_passed_button = True )

# ----------------------------------------------------------------

create_colour_light_signal (canvas,51,1100,250,refresh_immediately = False,
                            sig_callback = main_callback_function, orientation = 180,
                            signal_subtype = signal_sub_type.distant)

create_semaphore_signal (canvas,6,250,250,
                        sig_callback = main_callback_function,
                        orientation = 180,
                        sig_passed_button = True )

create_semaphore_signal (canvas,7,425,250,
                        subsidarymain = True,
                        subsidarylh1 = True,
                        subsidaryrh1 = True,
                        lhroute1 = True,
                        rhroute1 = True,
                        orientation = 180,
                        sig_callback = main_callback_function,
                        sig_passed_button = True )

create_semaphore_signal (canvas,8,600,250,
                        subsidarymain = True,
                        subsidaryrh1 = True,
                        lhroute1 = True,
                        sig_callback = main_callback_function,
                        orientation = 180,
                        approach_release_button =True,
                        sig_passed_button = True )

create_semaphore_signal (canvas,9,775,250,
                        subsidarymain = True,
                        subsidarylh1 = True,
                        rhroute1 = True,
                        orientation = 180,
                        sig_callback = main_callback_function,
                        approach_release_button =True,
                        sig_passed_button = True )

create_semaphore_signal (canvas,10,950,250,
                        theatre_route_indicator = True,
                        sig_callback = main_callback_function,
                        orientation = 180,
                        approach_release_button =True,
                        sig_passed_button = True )

# ----------------------------------------------------------------

create_semaphore_signal (canvas,11,250,400,
                        distant = True,
                        sig_callback = main_callback_function,
                        sig_passed_button = True )

create_semaphore_signal (canvas,12,425,400,
                        distant = True,
                        lhroute1 = True,
                        rhroute1 = True,
                        sig_callback = main_callback_function,
                        sig_passed_button = True )

create_semaphore_signal (canvas,13,600,400,
                        distant = True,
                        lhroute1 = True,
                        sig_callback = main_callback_function,
                        sig_passed_button = True )

create_semaphore_signal (canvas,14,775,400,
                        distant = True,
                        rhroute1 = True,
                        sig_callback = main_callback_function,
                        sig_passed_button = True )

# ----------------------------------------------------------------

create_semaphore_signal (canvas,15,250,500,
                        distant = True,
                        orientation = 180,
                        sig_callback = main_callback_function,
                        sig_passed_button = True )

create_semaphore_signal (canvas,16,425,500,
                        distant = True,
                        lhroute1 = True,
                        rhroute1 = True,
                        orientation = 180,
                        sig_callback = main_callback_function,
                        sig_passed_button = True )

create_semaphore_signal (canvas,17,600,500,
                        distant = True,
                        lhroute1 = True,
                        sig_callback = main_callback_function,
                        orientation = 180,
                        sig_passed_button = True )

create_semaphore_signal (canvas,18,775,500,
                        distant = True,
                        rhroute1 = True,
                        orientation = 180,
                        sig_callback = main_callback_function,
                        sig_passed_button = True )

# ----------------------------------------------------------------

create_ground_disc_signal (canvas,19,250,650,
                           sig_callback=main_callback_function,
                           orientation = 0,
                           sig_passed_button = True,
                           shunt_ahead = True)

create_ground_disc_signal (canvas, 20, 425, 650,
                           sig_callback=main_callback_function,
                           orientation = 0,
                           sig_passed_button = True)

create_ground_disc_signal (canvas, 21, 600, 650,
                           sig_callback=main_callback_function,
                           orientation = 180,
                           shunt_ahead = True)

create_ground_disc_signal (canvas, 22, 775, 650,
                           sig_callback=main_callback_function,
                           orientation = 180)

for I in range (1,23):
    set_route(I,route= route_type.MAIN)
    set_route(I,theatre_text="O", )

# Now enter the main event loop and wait for a button press (which will trigger a callback)
print ("Entering Main Event Loop")
window.mainloop()
